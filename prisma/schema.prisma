// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  profil    Profil?
  card      Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String          @id @default(cuid())
  card_number String          @unique
  card_name   String?         @default("Kartu Saya")
  pin         String
  card_status CARD_STATUS     @default(UNREGISTER)
  type        CARD_TYPE       @default(card_id)
  user        User?           @relation(fields: [userId], references: [id])
  userId      String?
  room        Room[]
  records     Rooms_Records[]
  roomRequest Room_Request[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Room {
  id          String          @id @default(cuid())
  ruid        String          @unique
  name        String?
  card        Card[]
  records     Rooms_Records[]
  roomRequest Room_Request[]
  lastOnline  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Room_Request {
  id        String   @id @default(cuid())
  card      Card     @relation(fields: [cardId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  cardId    String
}

model Rooms_Records {
  id        String   @id @default(cuid())
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: SetNull)
  roomId    String?
  Card      Card?    @relation(fields: [cardId], references: [id], onDelete: SetNull)
  cardId    String?
  isSuccess Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CARD_STATUS {
  REGISTER
  UNREGISTER
}

enum CARD_TYPE {
  card_id
  card_atm
  card_driver
  card_emoney
  card_studentid
}
