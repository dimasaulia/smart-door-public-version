// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  isVerified        Boolean   @default(false)
  password          String
  role              Role      @relation(fields: [roleId], references: [id])
  roleId            String
  profil            Profil?
  card              Card[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  passwordUpdatedAt DateTime?
  Token             Token?
}

model Token {
  id        String   @id @default(cuid())
  token     String?
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?  @default("/image/illustration-user.png")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id            String          @id @default(cuid())
  card_number   String          @unique
  card_name     String?         @default("Kartu Saya")
  pin           String
  card_status   CARD_STATUS     @default(UNREGISTER)
  type          CARD_TYPE       @default(card_id)
  isTwoStepAuth Boolean         @default(true)
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  room          Room[]
  records       Rooms_Records[]
  roomRequest   Room_Request[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Room {
  id          String          @id @default(cuid())
  ruid        String          @unique
  name        String?
  isActive    Boolean         @default(false)
  card        Card[]
  records     Rooms_Records[]
  roomRequest Room_Request[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  device      Device?
}

model Device {
  id         String    @id @default(cuid())
  device_id  String    @unique
  room       Room?     @relation(fields: [roomId], references: [id], onDelete: SetNull)
  pin        String    @default("$2b$10$93H.6AQWHWxlq4IQuT1cgu2oCi7OtgyTjYuWlgcq9beN2xPLSgFUW")
  lastOnline DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roomId     String?   @unique
}

model Api_Key {
  id        String   @id @default(cuid())
  secret    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room_Request {
  id        String   @id @default(cuid())
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  cardId    String
}

model Rooms_Records {
  id        String   @id @default(cuid())
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: SetNull)
  roomId    String?
  Card      Card?    @relation(fields: [cardId], references: [id], onDelete: SetNull)
  cardId    String?
  isSuccess Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CARD_STATUS {
  REGISTER
  UNREGISTER
}

enum CARD_TYPE {
  card_id
  card_atm
  card_driver
  card_emoney
  card_studentid
}
